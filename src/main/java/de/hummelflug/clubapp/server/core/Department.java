package de.hummelflug.clubapp.server.core;

import static com.google.common.base.Preconditions.checkNotNull;

import java.util.HashSet;
import java.util.Set;

import javax.annotation.Nonnull;
import javax.persistence.CollectionTable;
import javax.persistence.Column;
import javax.persistence.ElementCollection;
import javax.persistence.Entity;
import javax.persistence.JoinColumn;
import javax.persistence.NamedQueries;
import javax.persistence.NamedQuery;
import javax.persistence.PrimaryKeyJoinColumn;
import javax.persistence.SecondaryTable;
import javax.persistence.Table;

@Entity
@Table(name = "department")
@SecondaryTable(name = "club_department",
		pkJoinColumns=@PrimaryKeyJoinColumn(name="department_id", referencedColumnName="id"))
@NamedQueries({
    @NamedQuery(name = "de.hummelflug.clubapp.server.core.Department.findAll",
            query = "select d from Department d"),
    @NamedQuery(name = "de.hummelflug.clubapp.server.core.Department.findByName",
            query = "select d from Department d "
            + "where d.name like :name ")
})
public class Department extends AbstractModel {
	
	@Column(name = "creator_user_id", nullable = false)
	private Long creatorUserId;
	
	@Column(table = "club_department", name = "club_id", nullable = false)
	private Long clubId;
	
	@Column(name = "name", nullable = false)
	private String name;
	
	@Column(name = "sport_type_id", nullable = false)
	private Long sportTypeId;
	
	@ElementCollection
	@CollectionTable(name = "department_member", joinColumns = @JoinColumn(name = "department_id"))
	@Column(name = "member_user_id", nullable = false)
	private Set<Long> members;
	
	@ElementCollection
	@CollectionTable(name = "department_head", joinColumns = @JoinColumn(name = "department_id"))
	@Column(name = "dep_head_user_id", nullable = false)
	private Set<Long> head;

	
	@ElementCollection
	@CollectionTable(name = "department_team", joinColumns = @JoinColumn(name = "department_id"))
	@Column(name = "team_id", nullable = false)
	private Set<Long> teams;
	
	@ElementCollection
	@CollectionTable(name = "department_news_content", joinColumns = @JoinColumn(name = "department_id"))
	@Column(name = "news_content_id", nullable = false)
	private Set<Long> news;
	
	/**
	 * A no-argument constructor
	 */
	public Department() {
		head = new HashSet<Long>();
		members = new HashSet<Long>();
		news = new HashSet<Long>();
		teams = new HashSet<Long>();
	}

	/**
     * A constructor to create a user. id, creationTime, lastModification is not passed, cause it's
     * auto-generated by RDBMS.
     * 
     * @param creatorUserId user id of creator
     * @param name name of the department
     * @param sportTypeId id of sport type
     */
	public Department(@Nonnull Long creatorUserId, @Nonnull String name, @Nonnull Long sportTypeId) {
		head = new HashSet<Long>();
		members = new HashSet<Long>();
		news = new HashSet<Long>();
		teams = new HashSet<Long>();
		
		this.creatorUserId = checkNotNull(creatorUserId, "creator user id cannot be null");
		this.name = checkNotNull(name, "name cannot be null");
		this.sportTypeId = checkNotNull(sportTypeId, "sport type id cannot be null");
	}

	/* (non-Javadoc)
	 * @see java.lang.Object#hashCode()
	 */
	@Override
	public int hashCode() {
		final int prime = 31;
		int result = super.hashCode();
		result = prime * result + ((clubId == null) ? 0 : clubId.hashCode());
		result = prime * result + ((creatorUserId == null) ? 0 : creatorUserId.hashCode());
		result = prime * result + ((head == null) ? 0 : head.hashCode());
		result = prime * result + ((members == null) ? 0 : members.hashCode());
		result = prime * result + ((name == null) ? 0 : name.hashCode());
		result = prime * result + ((news == null) ? 0 : news.hashCode());
		result = prime * result + ((sportTypeId == null) ? 0 : sportTypeId.hashCode());
		result = prime * result + ((teams == null) ? 0 : teams.hashCode());
		return result;
	}

	/* (non-Javadoc)
	 * @see java.lang.Object#equals(java.lang.Object)
	 */
	@Override
	public boolean equals(Object obj) {
		if (this == obj)
			return true;
		if (!super.equals(obj))
			return false;
		if (getClass() != obj.getClass())
			return false;
		Department other = (Department) obj;
		if (clubId == null) {
			if (other.clubId != null)
				return false;
		} else if (!clubId.equals(other.clubId))
			return false;
		if (creatorUserId == null) {
			if (other.creatorUserId != null)
				return false;
		} else if (!creatorUserId.equals(other.creatorUserId))
			return false;
		if (head == null) {
			if (other.head != null)
				return false;
		} else if (!head.equals(other.head))
			return false;
		if (members == null) {
			if (other.members != null)
				return false;
		} else if (!members.equals(other.members))
			return false;
		if (name == null) {
			if (other.name != null)
				return false;
		} else if (!name.equals(other.name))
			return false;
		if (news == null) {
			if (other.news != null)
				return false;
		} else if (!news.equals(other.news))
			return false;
		if (sportTypeId == null) {
			if (other.sportTypeId != null)
				return false;
		} else if (!sportTypeId.equals(other.sportTypeId))
			return false;
		if (teams == null) {
			if (other.teams != null)
				return false;
		} else if (!teams.equals(other.teams))
			return false;
		return true;
	}

	/**
	 * @return the creatorUserId
	 */
	public Long getCreatorUserId() {
		return creatorUserId;
	}

	/**
	 * @param creatorUserId the creatorUserId to set
	 */
	public void setCreatorUserId(Long creatorUserId) {
		this.creatorUserId = creatorUserId;
	}

	/**
	 * @return the clubId
	 */
	public Long getClubId() {
		return clubId;
	}

	/**
	 * @param clubId the clubId to set
	 */
	public void setClubId(Long clubId) {
		this.clubId = clubId;
	}

	/**
	 * @return the name
	 */
	public String getName() {
		return name;
	}

	/**
	 * @param name the name to set
	 */
	public void setName(String name) {
		this.name = name;
	}

	/**
	 * @return the sportTypeId
	 */
	public Long getSportTypeId() {
		return sportTypeId;
	}

	/**
	 * @param sportTypeId the sportTypeId to set
	 */
	public void setSportTypeId(Long sportTypeId) {
		this.sportTypeId = sportTypeId;
	}

	/**
	 * @return the members
	 */
	public Set<Long> getMembers() {
		return members;
	}

	/**
	 * @param members the members to set
	 */
	public void setMembers(Set<Long> members) {
		this.members = members;
	}

	/**
	 * @return the head
	 */
	public Set<Long> getHead() {
		return head;
	}

	/**
	 * @param head the head to set
	 */
	public void setHead(Set<Long> head) {
		this.head = head;
	}

	/**
	 * @return the teams
	 */
	public Set<Long> getTeams() {
		return teams;
	}

	/**
	 * @param teams the teams to set
	 */
	public void setTeams(Set<Long> teams) {
		this.teams = teams;
	}

	/**
	 * @return the news
	 */
	public Set<Long> getNews() {
		return news;
	}

	/**
	 * @param news the news to set
	 */
	public void setNews(Set<Long> news) {
		this.news = news;
	}
	
}
