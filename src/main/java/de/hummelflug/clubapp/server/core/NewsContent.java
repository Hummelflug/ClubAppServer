package de.hummelflug.clubapp.server.core;

import static com.google.common.base.Preconditions.checkNotNull;

import javax.annotation.Nonnull;
import javax.persistence.Column;
import javax.persistence.Entity;
import javax.persistence.EnumType;
import javax.persistence.Enumerated;
import javax.persistence.Inheritance;
import javax.persistence.InheritanceType;
import javax.persistence.NamedQueries;
import javax.persistence.NamedQuery;
import javax.persistence.Table;

import de.hummelflug.clubapp.server.utils.NewsContentType;

@Entity
@Table(name = "news_content")
@Inheritance(strategy=InheritanceType.JOINED)
@NamedQueries({
    @NamedQuery(name = "de.hummelflug.clubapp.server.core.NewsContent.findAll",
            query = "select n from NewsContent n order by n.id asc"),
    @NamedQuery(name = "de.hummelflug.clubapp.server.core.NewsContent.findByIds",
			query = "select n from NewsContent n where n.id in :ids order by n.creationTime desc)")
})
public class NewsContent extends AbstractModel {

	@Column(name = "creator_user_id", nullable = false)
	private Long creatorUserId;
	
	@Column(name = "news_content_type", nullable = false)
	@Enumerated(EnumType.STRING)
	private NewsContentType newsContentType;
	
	/**
	 * A no-argument constructor
	 */
	public NewsContent() {
		
	}
	
	/**
	 * @param newsContentType type of news content
	 */
	public NewsContent(@Nonnull NewsContentType newsContentType) {
		this.newsContentType = checkNotNull(newsContentType, "news content type cannot be null");
	}
	
	/**
	 * @param newsContentType type of news content
	 * @param creatorUserId user id of creator
	 */
	public NewsContent(@Nonnull NewsContentType newsContentType, @Nonnull Long creatorUserId) {
		this.newsContentType = checkNotNull(newsContentType, "news content type cannot be null");
		this.creatorUserId = checkNotNull(creatorUserId, "creator user id cannot be null");
	}
	
	/**
     * A constructor to create news content. id, creationTime, lastModification is not passed, cause it's
     * auto-generated by RDBMS.
     * 
     * @param creatorUserId user id of creator
     * @param newsContentType type of news content
     */
	public NewsContent(@Nonnull Long creatorUserId, @Nonnull NewsContentType newsContentType) {
		this.creatorUserId = checkNotNull(creatorUserId, "user creator id cannot be null");
		this.newsContentType = checkNotNull(newsContentType, "news content type cannot be null");
	}

	/* (non-Javadoc)
	 * @see java.lang.Object#hashCode()
	 */
	@Override
	public int hashCode() {
		final int prime = 31;
		int result = super.hashCode();
		result = prime * result + ((creatorUserId == null) ? 0 : creatorUserId.hashCode());
		result = prime * result + ((newsContentType == null) ? 0 : newsContentType.hashCode());
		return result;
	}

	/* (non-Javadoc)
	 * @see java.lang.Object#equals(java.lang.Object)
	 */
	@Override
	public boolean equals(Object obj) {
		if (this == obj)
			return true;
		if (!super.equals(obj))
			return false;
		if (getClass() != obj.getClass())
			return false;
		NewsContent other = (NewsContent) obj;
		if (creatorUserId == null) {
			if (other.creatorUserId != null)
				return false;
		} else if (!creatorUserId.equals(other.creatorUserId))
			return false;
		if (newsContentType != other.newsContentType)
			return false;
		return true;
	}

	/**
	 * @return the creatorUserId
	 */
	public Long getCreatorUserId() {
		return creatorUserId;
	}

	/**
	 * @param creatorUserId the creatorUserId to set
	 */
	public void setCreatorUserId(Long creatorUserId) {
		this.creatorUserId = creatorUserId;
	}

	/**
	 * @return the newsContentType
	 */
	public NewsContentType getNewsContentType() {
		return newsContentType;
	}

	/**
	 * @param newsContentType the newsContentType to set
	 */
	public void setNewsContentType(NewsContentType newsContentType) {
		this.newsContentType = newsContentType;
	}
	
}
