package de.hummelflug.clubapp.server.core;

import java.security.Principal;
import java.util.Date;
import java.util.HashSet;
import java.util.Set;

import javax.annotation.Nonnull;
import javax.persistence.CollectionTable;
import javax.persistence.Column;
import javax.persistence.ElementCollection;
import javax.persistence.Entity;
import javax.persistence.EnumType;
import javax.persistence.Enumerated;
import javax.persistence.FetchType;
import javax.persistence.Inheritance;
import javax.persistence.InheritanceType;
import javax.persistence.JoinColumn;
import javax.persistence.NamedQueries;
import javax.persistence.NamedQuery;
import javax.persistence.Table;
import javax.persistence.Temporal;
import javax.persistence.TemporalType;

import de.hummelflug.clubapp.server.utils.GenderType;
import de.hummelflug.clubapp.server.utils.UserRole;

import static com.google.common.base.Preconditions.checkNotNull;

@Entity
@Table(name = "user")
@Inheritance(strategy=InheritanceType.JOINED)
@NamedQueries({
    @NamedQuery(name = "de.hummelflug.clubapp.server.core.User.findAll",
            query = "select u from User u order by u.id asc"),
    @NamedQuery(name = "de.hummelflug.clubapp.server.core.User.findByEmail",
		    query = "select u from User u "
		    + "where u.email = :email"),
    @NamedQuery(name = "de.hummelflug.clubapp.server.core.User.findByName",
            query = "select u from User u "
            + "where u.firstName like :name "
            + "or u.lastName like :name order by u.id asc")
})
public class User extends AbstractModel implements Principal {
	
	@Column(name = "last_name", nullable = false)
	private String lastName;
	
	@Column(name = "first_name", nullable = false)
	private String firstName;
	
	@Column(name = "birthday", nullable = false)
	@Temporal(TemporalType.DATE)
	private Date birthday;
	
	@Column(name = "email", nullable = false)
	private String email;
	
	@Column(name = "password", nullable = false)
	private String password;
	
	@Column(name = "gender")
	@Enumerated(EnumType.STRING)
	private GenderType gender;
	
	@Column(name = "phone", nullable = false)
	private String phone;
	
	@Column(name = "street", nullable = false)
	private String street;
	
	@Column(name = "postcode", nullable = false)
	private String postcode;
	
	@Column(name = "city", nullable = false)
	private String city;
	
	@ElementCollection (fetch = FetchType.EAGER, targetClass = UserRole.class)
	@CollectionTable(name = "user_role", joinColumns = @JoinColumn(name = "user_id"))
	@Column(name = "user_role", nullable = false)
	@Enumerated(EnumType.STRING)
	private Set<UserRole> userRoles;
	
	/**
	 * A no-argument constructor
	 */
	public User() {
		userRoles = new HashSet<UserRole>();
	}
	
	/**
	 * @param userRole user role
	 */
	public User(@Nonnull UserRole userRole) {
		this.userRoles = new HashSet<UserRole>();
		this.userRoles.add(checkNotNull(userRole, "userRole cannot be null"));
	}
	
	/**
     * A constructor to create a user. id, creationTime, lastModification is not passed, cause it's
     * auto-generated by RDBMS.
     * 
     * @param lastName user last name
     * @param firstName user first name
     * @param birthday user birthday
     * @param email user email
     * @param password user password
     * @param gender user gender
     * @param userRole user role
     * @param phone phone number of user
     * @param street part of address
     * @param postcode part of address
     * @param city part of address
     */
	public User(@Nonnull String lastName, @Nonnull String firstName, @Nonnull Date birthday, @Nonnull String email, 
			@Nonnull String password, GenderType gender, @Nonnull String phone, @Nonnull String street,
			@Nonnull String postcode, @Nonnull String city, @Nonnull UserRole userRole) {
		this.userRoles = new HashSet<UserRole>();
		this.userRoles.add(checkNotNull(userRole, "userRole cannot be null"));
		
		this.lastName = checkNotNull(lastName, "last name cannot be null");
		this.firstName = checkNotNull(firstName, "first name cannot be null");
		this.birthday = checkNotNull(birthday, "birthday cannot be null");
		this.email = checkNotNull(email, "email cannot be null");
		this.password = checkNotNull(password, "password cannot be null");
		this.gender = checkNotNull(gender, "gender cannot be null");
		this.phone = checkNotNull(phone, "phone cannot be null");
		this.street = checkNotNull(street, "street cannot be null");
		this.postcode = checkNotNull(postcode, "postcode cannot be null");
		this.city = checkNotNull(city, "city cannot be null");
	}
	
	/**
	 * DO NOT REMOVE THIS METHOD
	 * method returns email as name for authentication
	 * @return the email
	 */
	public String getName() {
		return email;
	}

	/* (non-Javadoc)
	 * @see java.lang.Object#hashCode()
	 */
	@Override
	public int hashCode() {
		final int prime = 31;
		int result = super.hashCode();
		result = prime * result + ((birthday == null) ? 0 : birthday.hashCode());
		result = prime * result + ((city == null) ? 0 : city.hashCode());
		result = prime * result + ((email == null) ? 0 : email.hashCode());
		result = prime * result + ((firstName == null) ? 0 : firstName.hashCode());
		result = prime * result + ((gender == null) ? 0 : gender.hashCode());
		result = prime * result + ((lastName == null) ? 0 : lastName.hashCode());
		result = prime * result + ((password == null) ? 0 : password.hashCode());
		result = prime * result + ((phone == null) ? 0 : phone.hashCode());
		result = prime * result + ((postcode == null) ? 0 : postcode.hashCode());
		result = prime * result + ((street == null) ? 0 : street.hashCode());
		result = prime * result + ((userRoles == null) ? 0 : userRoles.hashCode());
		return result;
	}

	/* (non-Javadoc)
	 * @see java.lang.Object#equals(java.lang.Object)
	 */
	@Override
	public boolean equals(Object obj) {
		if (this == obj)
			return true;
		if (!super.equals(obj))
			return false;
		if (getClass() != obj.getClass())
			return false;
		User other = (User) obj;
		if (birthday == null) {
			if (other.birthday != null)
				return false;
		} else if (!birthday.equals(other.birthday))
			return false;
		if (city == null) {
			if (other.city != null)
				return false;
		} else if (!city.equals(other.city))
			return false;
		if (email == null) {
			if (other.email != null)
				return false;
		} else if (!email.equals(other.email))
			return false;
		if (firstName == null) {
			if (other.firstName != null)
				return false;
		} else if (!firstName.equals(other.firstName))
			return false;
		if (gender != other.gender)
			return false;
		if (lastName == null) {
			if (other.lastName != null)
				return false;
		} else if (!lastName.equals(other.lastName))
			return false;
		if (password == null) {
			if (other.password != null)
				return false;
		} else if (!password.equals(other.password))
			return false;
		if (phone == null) {
			if (other.phone != null)
				return false;
		} else if (!phone.equals(other.phone))
			return false;
		if (postcode == null) {
			if (other.postcode != null)
				return false;
		} else if (!postcode.equals(other.postcode))
			return false;
		if (street == null) {
			if (other.street != null)
				return false;
		} else if (!street.equals(other.street))
			return false;
		if (userRoles == null) {
			if (other.userRoles != null)
				return false;
		} else if (!userRoles.equals(other.userRoles))
			return false;
		return true;
	}

	/**
	 * @return the lastName
	 */
	public String getLastName() {
		return lastName;
	}

	/**
	 * @param lastName the lastName to set
	 */
	public void setLastName(String lastName) {
		this.lastName = lastName;
	}

	/**
	 * @return the firstName
	 */
	public String getFirstName() {
		return firstName;
	}

	/**
	 * @param firstName the firstName to set
	 */
	public void setFirstName(String firstName) {
		this.firstName = firstName;
	}

	/**
	 * @return the birthday
	 */
	public Date getBirthday() {
		return birthday;
	}

	/**
	 * @param birthday the birthday to set
	 */
	public void setBirthday(Date birthday) {
		this.birthday = birthday;
	}

	/**
	 * @return the email
	 */
	public String getEmail() {
		return email;
	}

	/**
	 * @param email the email to set
	 */
	public void setEmail(String email) {
		this.email = email;
	}

	/**
	 * @return the password
	 */
	public String getPassword() {
		return password;
	}

	/**
	 * @param password the password to set
	 */
	public void setPassword(String password) {
		this.password = password;
	}

	/**
	 * @return the gender
	 */
	public GenderType getGender() {
		return gender;
	}

	/**
	 * @param gender the gender to set
	 */
	public void setGender(GenderType gender) {
		this.gender = gender;
	}

	/**
	 * @return the phone
	 */
	public String getPhone() {
		return phone;
	}

	/**
	 * @param phone the phone to set
	 */
	public void setPhone(String phone) {
		this.phone = phone;
	}

	/**
	 * @return the street
	 */
	public String getStreet() {
		return street;
	}

	/**
	 * @param street the street to set
	 */
	public void setStreet(String street) {
		this.street = street;
	}

	/**
	 * @return the postcode
	 */
	public String getPostcode() {
		return postcode;
	}

	/**
	 * @param postcode the postcode to set
	 */
	public void setPostcode(String postcode) {
		this.postcode = postcode;
	}

	/**
	 * @return the city
	 */
	public String getCity() {
		return city;
	}

	/**
	 * @param city the city to set
	 */
	public void setCity(String city) {
		this.city = city;
	}

	/**
	 * @return the userRoles
	 */
	public Set<UserRole> getUserRoles() {
		return userRoles;
	}

	/**
	 * @param userRoles the userRoles to set
	 */
	public void setUserRoles(Set<UserRole> userRoles) {
		this.userRoles = userRoles;
	}

}
