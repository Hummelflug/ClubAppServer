package de.hummelflug.clubapp.server.core;

import java.util.HashSet;
import java.util.Set;

import javax.annotation.Nonnull;
import javax.persistence.CollectionTable;
import javax.persistence.Column;
import javax.persistence.ElementCollection;
import javax.persistence.Entity;
import javax.persistence.EnumType;
import javax.persistence.Enumerated;
import javax.persistence.JoinColumn;
import javax.persistence.NamedQueries;
import javax.persistence.NamedQuery;
import javax.persistence.PrimaryKeyJoinColumn;
import javax.persistence.SecondaryTable;
import javax.persistence.Table;

import de.hummelflug.clubapp.server.utils.GenderType;

import static com.google.common.base.Preconditions.checkNotNull;

@Entity
@Table(name = "team")
@SecondaryTable(name = "team_schedule",
		pkJoinColumns=@PrimaryKeyJoinColumn(name="team_id", referencedColumnName="id"))
@NamedQueries({
    @NamedQuery(name = "de.hummelflug.clubapp.server.core.Team.findAll",
            query = "select t from Team t"),
    @NamedQuery(name = "de.hummelflug.clubapp.server.core.Team.findByName",
            query = "select t from Team t "
            + "where t.name like :name ")
})
public class Team extends AbstractModel {
	
	@Column(name = "creator_user_id", nullable = false)
	private Long creatorUserId;
	
	@Column(name = "name", nullable = false)
	private String name;
	
	@Column(name = "gender", nullable = false)
	@Enumerated(EnumType.STRING)
	private GenderType gender;
	
	@Column(name = "age_class", nullable = false)
	private Integer ageClass;
	
	@Column(name = "sport_type_id", nullable = false)
	private Long sportTypeId;
	
	@ElementCollection
	@CollectionTable(name = "team_board", joinColumns = @JoinColumn(name = "team_id"))
	@Column(name = "board_user_id", nullable = false)
	private Set<Long> board;
	
	@ElementCollection
	@CollectionTable(name = "coach_current_team", joinColumns = @JoinColumn(name = "team_id"))
	@Column(name = "coach_id", nullable = false)
	private Set<Long> coaches;
	
	@ElementCollection
	@CollectionTable(name = "player_current_team", joinColumns = @JoinColumn(name = "team_id"))
	@Column(name = "player_id", nullable = false)
	private Set<Long> players;
	
	@Column(table = "team_schedule", name = "schedule_id", nullable = false)
	private Long teamScheduleId;
	
	/**
	 * A no-argument constructor
	 */
	public Team() {
		board = new HashSet<Long>();
		coaches = new HashSet<Long>();
		players = new HashSet<Long>();
	}
	
	/**
     * A constructor to create a user. id, creationTime, lastModification is not passed, cause it's
     * auto-generated by RDBMS.
     * 
     * @param creatorUserId user id of creator
     * @param name name of the team
     * @param gender gender of the team
     * @param ageClass age class of the team
     * @param sportTypeId id of sport type
     */
	public Team(@Nonnull Long creatorUserId, @Nonnull String name, GenderType gender, @Nonnull Integer ageClass,
			@Nonnull Long sportTypeId) {
		board = new HashSet<Long>();
		coaches = new HashSet<Long>();
		players = new HashSet<Long>();
		
		this.creatorUserId = checkNotNull(creatorUserId, "creator user id cannot be null");
		this.name = checkNotNull(name, "name cannot be null");
		this.gender = gender;
		this.ageClass = checkNotNull(ageClass, "age class cannot be null");
		this.sportTypeId = checkNotNull(sportTypeId, "sport type id cannot be null");
	}

	/* (non-Javadoc)
	 * @see java.lang.Object#hashCode()
	 */
	@Override
	public int hashCode() {
		final int prime = 31;
		int result = super.hashCode();
		result = prime * result + ((ageClass == null) ? 0 : ageClass.hashCode());
		result = prime * result + ((board == null) ? 0 : board.hashCode());
		result = prime * result + ((coaches == null) ? 0 : coaches.hashCode());
		result = prime * result + ((creatorUserId == null) ? 0 : creatorUserId.hashCode());
		result = prime * result + ((gender == null) ? 0 : gender.hashCode());
		result = prime * result + ((name == null) ? 0 : name.hashCode());
		result = prime * result + ((players == null) ? 0 : players.hashCode());
		result = prime * result + ((sportTypeId == null) ? 0 : sportTypeId.hashCode());
		result = prime * result + ((teamScheduleId == null) ? 0 : teamScheduleId.hashCode());
		return result;
	}

	/* (non-Javadoc)
	 * @see java.lang.Object#equals(java.lang.Object)
	 */
	@Override
	public boolean equals(Object obj) {
		if (this == obj)
			return true;
		if (!super.equals(obj))
			return false;
		if (getClass() != obj.getClass())
			return false;
		Team other = (Team) obj;
		if (ageClass == null) {
			if (other.ageClass != null)
				return false;
		} else if (!ageClass.equals(other.ageClass))
			return false;
		if (board == null) {
			if (other.board != null)
				return false;
		} else if (!board.equals(other.board))
			return false;
		if (coaches == null) {
			if (other.coaches != null)
				return false;
		} else if (!coaches.equals(other.coaches))
			return false;
		if (creatorUserId == null) {
			if (other.creatorUserId != null)
				return false;
		} else if (!creatorUserId.equals(other.creatorUserId))
			return false;
		if (gender != other.gender)
			return false;
		if (name == null) {
			if (other.name != null)
				return false;
		} else if (!name.equals(other.name))
			return false;
		if (players == null) {
			if (other.players != null)
				return false;
		} else if (!players.equals(other.players))
			return false;
		if (sportTypeId == null) {
			if (other.sportTypeId != null)
				return false;
		} else if (!sportTypeId.equals(other.sportTypeId))
			return false;
		if (teamScheduleId == null) {
			if (other.teamScheduleId != null)
				return false;
		} else if (!teamScheduleId.equals(other.teamScheduleId))
			return false;
		return true;
	}

	/**
	 * @return the creatorUserId
	 */
	public Long getCreatorUserId() {
		return creatorUserId;
	}

	/**
	 * @param creatorUserId the creatorUserId to set
	 */
	public void setCreatorUserId(Long creatorUserId) {
		this.creatorUserId = creatorUserId;
	}

	/**
	 * @return the name
	 */
	public String getName() {
		return name;
	}

	/**
	 * @param name the name to set
	 */
	public void setName(String name) {
		this.name = name;
	}

	/**
	 * @return the gender
	 */
	public GenderType getGender() {
		return gender;
	}

	/**
	 * @param gender the gender to set
	 */
	public void setGender(GenderType gender) {
		this.gender = gender;
	}

	/**
	 * @return the ageClass
	 */
	public Integer getAgeClass() {
		return ageClass;
	}

	/**
	 * @param ageClass the ageClass to set
	 */
	public void setAgeClass(Integer ageClass) {
		this.ageClass = ageClass;
	}

	/**
	 * @return the sportTypeId
	 */
	public Long getSportTypeId() {
		return sportTypeId;
	}

	/**
	 * @param sportTypeId the sportTypeId to set
	 */
	public void setSportTypeId(Long sportTypeId) {
		this.sportTypeId = sportTypeId;
	}

	/**
	 * @return the board
	 */
	public Set<Long> getBoard() {
		return board;
	}

	/**
	 * @param board the board to set
	 */
	public void setBoard(Set<Long> board) {
		this.board = board;
	}

	/**
	 * @return the coaches
	 */
	public Set<Long> getCoaches() {
		return coaches;
	}

	/**
	 * @param coaches the coaches to set
	 */
	public void setCoaches(Set<Long> coaches) {
		this.coaches = coaches;
	}

	/**
	 * @return the players
	 */
	public Set<Long> getPlayers() {
		return players;
	}

	/**
	 * @param players the players to set
	 */
	public void setPlayers(Set<Long> players) {
		this.players = players;
	}

	/**
	 * @return the teamScheduleId
	 */
	public Long getTeamScheduleId() {
		return teamScheduleId;
	}

	/**
	 * @param teamScheduleId the teamScheduleId to set
	 */
	public void setTeamScheduleId(Long teamScheduleId) {
		this.teamScheduleId = teamScheduleId;
	}
	
}
