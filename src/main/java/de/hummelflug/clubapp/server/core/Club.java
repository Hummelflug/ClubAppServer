package de.hummelflug.clubapp.server.core;

import java.util.Date;
import java.util.Set;

import javax.annotation.Nonnull;
import javax.persistence.CollectionTable;
import javax.persistence.Column;
import javax.persistence.ElementCollection;
import javax.persistence.Entity;
import javax.persistence.GeneratedValue;
import javax.persistence.GenerationType;
import javax.persistence.Id;
import javax.persistence.JoinColumn;
import javax.persistence.NamedQueries;
import javax.persistence.NamedQuery;
import javax.persistence.Table;
import javax.persistence.Temporal;
import javax.persistence.TemporalType;

import org.hibernate.annotations.Where;

import static com.google.common.base.Preconditions.checkNotNull;

@Entity
@Table(name = "club")
@NamedQueries({
    @NamedQuery(name = "de.hummelflug.clubapp.server.core.Club.findAll",
            query = "select c from Club c"),
    @NamedQuery(name = "de.hummelflug.clubapp.server.core.Club.findByName",
            query = "select c from Club c "
            + "where c.name like :name ")
})
public class Club {
	
	@Id
	@GeneratedValue(strategy = GenerationType.IDENTITY)
	private Long id;
	
	@Column(name = "creation_time", nullable = false)
	@GeneratedValue(strategy = GenerationType.AUTO)
	@Temporal(TemporalType.TIMESTAMP)
	private Date creationTime;
	
	@Column(name = "last_modification", nullable = false)
	@GeneratedValue(strategy = GenerationType.AUTO)
	@Temporal(TemporalType.TIMESTAMP)
	private Date lastModification;
	
	@Column(name = "name", nullable = false)
	private String name;
	
	@Column(name = "foundation_date")
	@Temporal(TemporalType.DATE)
	private Date foundationDate;
	
	@ElementCollection
	@CollectionTable(name = "club_team", joinColumns = @JoinColumn(name = "club_id"))
	@Column(name = "team_id", nullable = false)
	private Set<Long> teams;
	
	@ElementCollection
	@CollectionTable(name = "user_current_club", joinColumns = @JoinColumn(name = "club_id"))
	@Column(name = "user_id", nullable = false)
	@Where(clause = "user_role = 'COACH'")
	private Set<Long> coaches;
	
	@ElementCollection
	@CollectionTable(name = "user_current_club", joinColumns = @JoinColumn(name = "club_id"))
	@Column(name = "user_id", nullable = false)
	@Where(clause = "user_role = 'PLAYER'")
	private Set<Long> players;
	
	@ElementCollection
	@CollectionTable(name = "club_sport_type", joinColumns = @JoinColumn(name = "club_id"))
	@Column(name = "sport_type_id", nullable = false)
	private Set<Long> providedSportTypes;

	/**
	 * A no-argument constructor
	 */
	public Club() {
	}
	
	/**
     * A constructor to create a user. id, creationTime, lastModification is not passed, cause it's
     * auto-generated by RDBMS.
     * 
     * @param name name of the club
     * @param foundationDate date of club foundation
     */
	public Club(@Nonnull String name, Date foundationDate) {
		this.name = checkNotNull(name, "name cannot be null");
		this.foundationDate = foundationDate;
	}

	/* (non-Javadoc)
	 * @see java.lang.Object#hashCode()
	 */
	@Override
	public int hashCode() {
		final int prime = 31;
		int result = 1;
		result = prime * result + ((coaches == null) ? 0 : coaches.hashCode());
		result = prime * result + ((creationTime == null) ? 0 : creationTime.hashCode());
		result = prime * result + ((foundationDate == null) ? 0 : foundationDate.hashCode());
		result = prime * result + ((id == null) ? 0 : id.hashCode());
		result = prime * result + ((lastModification == null) ? 0 : lastModification.hashCode());
		result = prime * result + ((name == null) ? 0 : name.hashCode());
		result = prime * result + ((players == null) ? 0 : players.hashCode());
		result = prime * result + ((providedSportTypes == null) ? 0 : providedSportTypes.hashCode());
		result = prime * result + ((teams == null) ? 0 : teams.hashCode());
		return result;
	}

	/* (non-Javadoc)
	 * @see java.lang.Object#equals(java.lang.Object)
	 */
	@Override
	public boolean equals(Object obj) {
		if (this == obj)
			return true;
		if (obj == null)
			return false;
		if (getClass() != obj.getClass())
			return false;
		Club other = (Club) obj;
		if (coaches == null) {
			if (other.coaches != null)
				return false;
		} else if (!coaches.equals(other.coaches))
			return false;
		if (creationTime == null) {
			if (other.creationTime != null)
				return false;
		} else if (!creationTime.equals(other.creationTime))
			return false;
		if (foundationDate == null) {
			if (other.foundationDate != null)
				return false;
		} else if (!foundationDate.equals(other.foundationDate))
			return false;
		if (id == null) {
			if (other.id != null)
				return false;
		} else if (!id.equals(other.id))
			return false;
		if (lastModification == null) {
			if (other.lastModification != null)
				return false;
		} else if (!lastModification.equals(other.lastModification))
			return false;
		if (name == null) {
			if (other.name != null)
				return false;
		} else if (!name.equals(other.name))
			return false;
		if (players == null) {
			if (other.players != null)
				return false;
		} else if (!players.equals(other.players))
			return false;
		if (providedSportTypes == null) {
			if (other.providedSportTypes != null)
				return false;
		} else if (!providedSportTypes.equals(other.providedSportTypes))
			return false;
		if (teams == null) {
			if (other.teams != null)
				return false;
		} else if (!teams.equals(other.teams))
			return false;
		return true;
	}

	/**
	 * @return the id
	 */
	public Long getId() {
		return id;
	}

	/**
	 * @param id the id to set
	 */
	public void setId(Long id) {
		this.id = id;
	}

	/**
	 * @return the creationTime
	 */
	public Date getCreationTime() {
		return creationTime;
	}

	/**
	 * @param creationTime the creationTime to set
	 */
	public void setCreationTime(Date creationTime) {
		this.creationTime = creationTime;
	}

	/**
	 * @return the lastModification
	 */
	public Date getLastModification() {
		return lastModification;
	}

	/**
	 * @param lastModification the lastModification to set
	 */
	public void setLastModification(Date lastModification) {
		this.lastModification = lastModification;
	}

	/**
	 * @return the name
	 */
	public String getName() {
		return name;
	}

	/**
	 * @param name the name to set
	 */
	public void setName(String name) {
		this.name = name;
	}

	/**
	 * @return the foundationDate
	 */
	public Date getFoundationDate() {
		return foundationDate;
	}

	/**
	 * @param foundationDate the foundationDate to set
	 */
	public void setFoundationDate(Date foundationDate) {
		this.foundationDate = foundationDate;
	}

	/**
	 * @return the teams
	 */
	public Set<Long> getTeams() {
		return teams;
	}

	/**
	 * @param teams the teams to set
	 */
	public void setTeams(Set<Long> teams) {
		this.teams = teams;
	}

	/**
	 * @return the coaches
	 */
	public Set<Long> getCoaches() {
		return coaches;
	}

	/**
	 * @param coaches the coaches to set
	 */
	public void setCoaches(Set<Long> coaches) {
		this.coaches = coaches;
	}

	/**
	 * @return the players
	 */
	public Set<Long> getPlayers() {
		return players;
	}

	/**
	 * @param players the players to set
	 */
	public void setPlayers(Set<Long> players) {
		this.players = players;
	}

	/**
	 * @return the providedSportTypes
	 */
	public Set<Long> getProvidedSportTypes() {
		return providedSportTypes;
	}

	/**
	 * @param providedSportTypes the providedSportTypes to set
	 */
	public void setProvidedSportTypes(Set<Long> providedSportTypes) {
		this.providedSportTypes = providedSportTypes;
	}

}
