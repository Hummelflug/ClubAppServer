package de.hummelflug.clubapp.server.core;

import java.util.Date;
import java.util.HashSet;
import java.util.Set;

import javax.annotation.Nonnull;
import javax.persistence.CollectionTable;
import javax.persistence.Column;
import javax.persistence.ElementCollection;
import javax.persistence.Entity;
import javax.persistence.EnumType;
import javax.persistence.Enumerated;
import javax.persistence.Inheritance;
import javax.persistence.InheritanceType;
import javax.persistence.JoinColumn;
import javax.persistence.NamedQueries;
import javax.persistence.NamedQuery;
import javax.persistence.Table;
import javax.persistence.Temporal;
import javax.persistence.TemporalType;

import de.hummelflug.clubapp.server.utils.EventType;

import static com.google.common.base.Preconditions.checkNotNull;

@Entity
@Table(name = "event")
@Inheritance(strategy=InheritanceType.JOINED)
@NamedQueries({
    @NamedQuery(name = "de.hummelflug.clubapp.server.core.Event.findAll",
            query = "select e from Event e"),
    @NamedQuery(name = "de.hummelflug.clubapp.server.core.Event.findUpcomingByIds",
			query = "select e from Event e "
					+ "where e.id in :ids and e.eventType in :types and e.endTime > :currentTime "
					+ "order by e.meetingTime")
})
public class Event extends AbstractModel {
	
	@Column(name = "creator_user_id", nullable = false)
	private Long creatorUserId;
	
	@Column(name = "meeting_time", nullable = false)
	@Temporal(TemporalType.TIMESTAMP)
	private Date meetingTime;
	
	@Column(name = "start_time", nullable = false)
	@Temporal(TemporalType.TIMESTAMP)
	private Date startTime;
	
	@Column(name = "end_time", nullable = false)
	@Temporal(TemporalType.TIMESTAMP)
	private Date endTime;
	
	@Column(name = "title", nullable = false)
	private String title;
	
	@Column(name = "event_type", nullable = false)
	@Enumerated(EnumType.STRING)
	private EventType eventType;
	
	@Column(name = "sport_type_id", nullable = false)
	private Long sportTypeId;
	
	@ElementCollection
	@CollectionTable(name = "event_participants", joinColumns = @JoinColumn(name = "event_id"))
	@Column(name = "user_id", nullable = false)
	private Set<Long> participants;
	
	@ElementCollection
	@CollectionTable(name = "event_confirmation", joinColumns = @JoinColumn(name = "event_id"))
	@Column(name = "user_id", nullable = false)
	private Set<Long> confirmedParticipants;
	
	@ElementCollection
	@CollectionTable(name = "event_absence", joinColumns = @JoinColumn(name = "event_id"))
	@Column(name = "user_id", nullable = false)
	private Set<Long> absentUsers;
	
	@ElementCollection
	@CollectionTable(name = "event_unknown_status", joinColumns = @JoinColumn(name = "event_id"))
	@Column(name = "user_id", nullable = false)
	private Set<Long> undecidedUsers;
	
	/**
	 * A no-argument constructor
	 */
	public Event() {
		participants = new HashSet<Long>();
		confirmedParticipants = new HashSet<Long>();
		absentUsers = new HashSet<Long>();
		undecidedUsers = new HashSet<Long>();
	}
	
	/**
	 * @param eventType of event (game, training)
	 */
	public Event(@Nonnull EventType eventType) {
		participants = new HashSet<Long>();
		confirmedParticipants = new HashSet<Long>();
		absentUsers = new HashSet<Long>();
		undecidedUsers = new HashSet<Long>();
		
		this.eventType = checkNotNull(eventType, "event type cannot be null");
	}
	
	/**
	 * A constructor to create a event. id, creationTime, lastModification is not passed, cause it's
     * auto-generated by RDBMS.
	 * 
	 * @param creatorUserId user id of creator
	 * @param eventType of event
	 * @param meetingTime of event
	 * @param startTime of the event
	 * @param endTime of the event
	 * @param title of the event
	 * @param sportTypeId of the game
	 */
	public Event(@Nonnull Long creatorUserId, @Nonnull EventType eventType, @Nonnull Date meetingTime, 
			@Nonnull Date startTime, @Nonnull Date endTime, @Nonnull String title, Long sportTypeId) {
		participants = new HashSet<Long>();
		confirmedParticipants = new HashSet<Long>();
		absentUsers = new HashSet<Long>();
		undecidedUsers = new HashSet<Long>();
		
		this.sportTypeId = sportTypeId;
		
		this.creatorUserId = checkNotNull(creatorUserId, "creator user id cannot be null");
		this.eventType = checkNotNull(eventType, "event type cannot be null");
		this.meetingTime = checkNotNull(meetingTime, "meeting time cannot be null");
		this.startTime = checkNotNull(startTime, "start time cannot be null");
		this.endTime = checkNotNull(endTime, "end time cannot be null");
		this.title = checkNotNull(title, "title cannot be null");
	}

	/* (non-Javadoc)
	 * @see java.lang.Object#hashCode()
	 */
	@Override
	public int hashCode() {
		final int prime = 31;
		int result = super.hashCode();
		result = prime * result + ((absentUsers == null) ? 0 : absentUsers.hashCode());
		result = prime * result + ((confirmedParticipants == null) ? 0 : confirmedParticipants.hashCode());
		result = prime * result + ((creatorUserId == null) ? 0 : creatorUserId.hashCode());
		result = prime * result + ((endTime == null) ? 0 : endTime.hashCode());
		result = prime * result + ((eventType == null) ? 0 : eventType.hashCode());
		result = prime * result + ((meetingTime == null) ? 0 : meetingTime.hashCode());
		result = prime * result + ((participants == null) ? 0 : participants.hashCode());
		result = prime * result + ((sportTypeId == null) ? 0 : sportTypeId.hashCode());
		result = prime * result + ((startTime == null) ? 0 : startTime.hashCode());
		result = prime * result + ((title == null) ? 0 : title.hashCode());
		result = prime * result + ((undecidedUsers == null) ? 0 : undecidedUsers.hashCode());
		return result;
	}

	/* (non-Javadoc)
	 * @see java.lang.Object#equals(java.lang.Object)
	 */
	@Override
	public boolean equals(Object obj) {
		if (this == obj)
			return true;
		if (!super.equals(obj))
			return false;
		if (getClass() != obj.getClass())
			return false;
		Event other = (Event) obj;
		if (absentUsers == null) {
			if (other.absentUsers != null)
				return false;
		} else if (!absentUsers.equals(other.absentUsers))
			return false;
		if (confirmedParticipants == null) {
			if (other.confirmedParticipants != null)
				return false;
		} else if (!confirmedParticipants.equals(other.confirmedParticipants))
			return false;
		if (creatorUserId == null) {
			if (other.creatorUserId != null)
				return false;
		} else if (!creatorUserId.equals(other.creatorUserId))
			return false;
		if (endTime == null) {
			if (other.endTime != null)
				return false;
		} else if (!endTime.equals(other.endTime))
			return false;
		if (eventType != other.eventType)
			return false;
		if (meetingTime == null) {
			if (other.meetingTime != null)
				return false;
		} else if (!meetingTime.equals(other.meetingTime))
			return false;
		if (participants == null) {
			if (other.participants != null)
				return false;
		} else if (!participants.equals(other.participants))
			return false;
		if (sportTypeId == null) {
			if (other.sportTypeId != null)
				return false;
		} else if (!sportTypeId.equals(other.sportTypeId))
			return false;
		if (startTime == null) {
			if (other.startTime != null)
				return false;
		} else if (!startTime.equals(other.startTime))
			return false;
		if (title == null) {
			if (other.title != null)
				return false;
		} else if (!title.equals(other.title))
			return false;
		if (undecidedUsers == null) {
			if (other.undecidedUsers != null)
				return false;
		} else if (!undecidedUsers.equals(other.undecidedUsers))
			return false;
		return true;
	}

	/**
	 * @return the creatorUserId
	 */
	public Long getCreatorUserId() {
		return creatorUserId;
	}

	/**
	 * @param creatorUserId the creatorUserId to set
	 */
	public void setCreatorUserId(Long creatorUserId) {
		this.creatorUserId = creatorUserId;
	}

	/**
	 * @return the meetingTime
	 */
	public Date getMeetingTime() {
		return meetingTime;
	}

	/**
	 * @param meetingTime the meetingTime to set
	 */
	public void setMeetingTime(Date meetingTime) {
		this.meetingTime = meetingTime;
	}

	/**
	 * @return the startTime
	 */
	public Date getStartTime() {
		return startTime;
	}

	/**
	 * @param startTime the startTime to set
	 */
	public void setStartTime(Date startTime) {
		this.startTime = startTime;
	}

	/**
	 * @return the endTime
	 */
	public Date getEndTime() {
		return endTime;
	}

	/**
	 * @param endTime the endTime to set
	 */
	public void setEndTime(Date endTime) {
		this.endTime = endTime;
	}

	/**
	 * @return the title
	 */
	public String getTitle() {
		return title;
	}

	/**
	 * @param title the title to set
	 */
	public void setTitle(String title) {
		this.title = title;
	}

	/**
	 * @return the eventType
	 */
	public EventType getEventType() {
		return eventType;
	}

	/**
	 * @param eventType the eventType to set
	 */
	public void setEventType(EventType eventType) {
		this.eventType = eventType;
	}

	/**
	 * @return the sportTypeId
	 */
	public Long getSportTypeId() {
		return sportTypeId;
	}

	/**
	 * @param sportTypeId the sportTypeId to set
	 */
	public void setSportTypeId(Long sportTypeId) {
		this.sportTypeId = sportTypeId;
	}

	/**
	 * @return the participants
	 */
	public Set<Long> getParticipants() {
		return participants;
	}

	/**
	 * @param participants the participants to set
	 */
	public void setParticipants(Set<Long> participants) {
		this.participants = participants;
	}

	/**
	 * @return the confirmedParticipants
	 */
	public Set<Long> getConfirmedParticipants() {
		return confirmedParticipants;
	}

	/**
	 * @param confirmedParticipants the confirmedParticipants to set
	 */
	public void setConfirmedParticipants(Set<Long> confirmedParticipants) {
		this.confirmedParticipants = confirmedParticipants;
	}

	/**
	 * @return the absentUsers
	 */
	public Set<Long> getAbsentUsers() {
		return absentUsers;
	}

	/**
	 * @param absentUsers the absentUsers to set
	 */
	public void setAbsentUsers(Set<Long> absentUsers) {
		this.absentUsers = absentUsers;
	}

	/**
	 * @return the undecidedUsers
	 */
	public Set<Long> getUndecidedUsers() {
		return undecidedUsers;
	}

	/**
	 * @param undecidedUsers the undecidedUsers to set
	 */
	public void setUndecidedUsers(Set<Long> undecidedUsers) {
		this.undecidedUsers = undecidedUsers;
	}
	
}